# .github/workflows/ci-cd.yaml
name: Build, Push, and Update K8s Manifest

on:
  push:
    branches:
      - main # Or your primary branch, e.g., master
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write   # Required to write back the updated K8s manifest to the repo
  packages: write   # Required to publish a container to GitHub Packages (GHCR)

jobs:
  build-push-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetches all history so you can push back to the repo (if updating manifests)
          fetch-depth: 0 

      - name: Set up QEMU (for multi-platform builds, optional but good practice)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry (GHCR)
      # For GHCR, GITHUB_TOKEN is automatically available and has permissions if 'packages: write' is set.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # --- OR ---
      # Login to Docker Hub (Uncomment and use this section if you prefer Docker Hub)
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }} # Create this secret in your repo settings
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}    # Create this secret in your repo settings (use an Access Token)

      - name: Generate image tag
        id: image_meta
        run: |
          # Using the first 7 characters of the commit SHA as the tag
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "Generated tag: $TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Assumes Dockerfile is in the root of your repository
          file: ./app/Dockerfile # Path to your Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest 
            # Replace with your Docker Hub username and image name if using Docker Hub:
            # ${{ secrets.DOCKERHUB_USERNAME }}/ollama-chat-app:${{ env.IMAGE_TAG }}
            # ${{ secrets.DOCKERHUB_USERNAME }}/ollama-chat-app:latest
          # platforms: linux/amd64,linux/arm64 # Optional: for multi-platform images
          cache-from: type=gha
          cache-to: type=gha,mode=max
